@startuml
class ProjectGeneration {
    + {static} <<readonly>> MSBuildNamespaceUri : string = "http://schemas.microsoft.com/developer/msbuild/2003"
    {static} <<readonly>> k_BuiltinSupportedExtensions : Dictionary<string, ScriptingLanguage>
    m_SolutionProjectEntryTemplate : string
    m_SolutionProjectConfigurationTemplate : string
    {static} <<readonly>> k_ReimportSyncExtensions : string[]
    {static} <<readonly>> k_ScriptReferenceExpression : Regex
    m_ProjectSupportedExtensions : string[]
    + ProjectDirectory : string <<get>>
    <<readonly>> m_ProjectName : string
    <<readonly>> m_AssemblyNameProvider : IAssemblyNameProvider
    <<readonly>> m_FileIOProvider : IFileIO
    <<readonly>> m_GUIDGenerator : IGUIDGenerator
    <<internal>> {static} isRiderProjectGeneration : bool
    <<const>> k_ToolsVersion : string = "4.0"
    <<const>> k_ProductVersion : string = "10.0.20506"
    <<const>> k_BaseDirectory : string = "."
    <<const>> k_TargetFrameworkVersion : string = "v4.7.1"
    <<const>> k_TargetLanguageVersion : string = "latest"
    AssemblyNameProvider : IAssemblyNameProvider <<get>>
    + ProjectGeneration()
    + ProjectGeneration(tempDirectory:string)
    + ProjectGeneration(tempDirectory:string, assemblyNameProvider:IAssemblyNameProvider, fileIoProvider:IFileIO, guidGenerator:IGUIDGenerator)
    + SyncIfNeeded(affectedFiles:IEnumerable<string>, reimportedFiles:IEnumerable<string>) : bool
    HasFilesBeenModified(affectedFiles:IEnumerable<string>, reimportedFiles:IEnumerable<string>) : bool
    {static} ShouldSyncOnReimportedAsset(asset:string) : bool
    + Sync() : void
    + HasSolutionBeenGenerated() : bool
    SetupProjectSupportedExtensions() : void
    ShouldFileBePartOfSolution(file:string) : bool
    HasValidExtension(file:string) : bool
    IsSupportedExtension(extension:string) : bool
    {static} ScriptingLanguageFor(island:Assembly) : ScriptingLanguage
    {static} GetExtensionOfSourceFiles(files:string[]) : string
    {static} GetExtensionOfSourceFile(file:string) : string
    {static} ScriptingLanguageFor(extension:string) : ScriptingLanguage
    + GenerateAndWriteSolutionAndProjects(types:Type[]) : void
    ParseResponseFileData(assembly:Assembly) : IEnumerable<ResponseFileData>
    - GetAllRoslynAnalyzerPaths() : IEnumerable<string>
    GenerateAllAssetProjectParts() : Dictionary<string, string>
    SyncProject(island:Assembly, allAssetsProjectParts:Dictionary<string, string>, responseFilesData:IEnumerable<ResponseFileData>, types:Type[], roslynAnalyzerDllPaths:string[]) : void
    SyncProjectFileIfNotChanged(path:string, newContents:string, types:Type[]) : void
    SyncSolutionFileIfNotChanged(path:string, newContents:string, types:Type[]) : void
    {static} SafeGetTypes(a:System.Reflection.Assembly) : List<Type>
    {static} OnGeneratedCSProjectFiles(types:Type[]) : void
    + {static} GetAssetPostprocessorTypes() : Type[]
    {static} OnPreGeneratingCSProjectFiles(types:Type[]) : bool
    {static} OnGeneratedCSProject(path:string, content:string, types:Type[]) : string
    {static} OnGeneratedSlnSolution(path:string, content:string, types:Type[]) : string
    SyncFileIfNotChanged(filename:string, newContents:string) : void
    ProjectText(assembly:Assembly, allAssetsProjectParts:Dictionary<string, string>, responseFilesData:List<ResponseFileData>, roslynAnalyzerDllPaths:string[]) : string
    {static} AppendReference(fullReference:string, projectBuilder:StringBuilder) : void
    + ProjectFile(assembly:Assembly) : string
    + SolutionFile() : string
    ProjectHeader(assembly:Assembly, responseFilesData:List<ResponseFileData>, roslynAnalyzerDllPaths:string[]) : string
    - {static} GenerateDocumentationFile(paths:IEnumerable<string>) : string
    - {static} GenerateWarningAsError(enumerable:IEnumerable<string>) : string
    - {static} GenerateWarningLevel(warningLevel:IEnumerable<string>) : string
    {static} GetSolutionText() : string
    {static} GetProjectFooterTemplate() : string
    {static} GetProjectHeaderTemplate() : string
    SyncSolution(islands:IEnumerable<Assembly>, types:Type[]) : void
    SolutionText(islands:IEnumerable<Assembly>) : string
    - {static} GenerateAnalyserItemGroup(paths:string[]) : string
    - {static} GetOtherArgumentsFromResponseFilesData(responseFilesData:List<ResponseFileData>) : ILookup<string, string>
    - GenerateLangVersion(langVersionList:IEnumerable<string>) : string
    - {static} GenerateAnalyserRuleSet(paths:string[]) : string
    - {static} GenerateAnalyserAdditionalFiles(paths:string[]) : string
    - {static} GenerateNoWarn(codes:string[]) : string
    {static} RelevantIslandsForMode(islands:IEnumerable<Assembly>) : IEnumerable<Assembly>
    GetProjectEntries(islands:IEnumerable<Assembly>) : string
    GetProjectActiveConfigurations(projectGuid:string) : string
    EscapedRelativePathFor(file:string) : string
    {static} SkipPathPrefix(path:string, prefix:string) : string
    {static} NormalizePath(path:string) : string
    {static} ProjectFooter() : string
    {static} GetProjectExtension() : string
    ProjectGuid(assembly:Assembly) : string
    {static} GetRootNamespace(assembly:Assembly) : string
}
enum ScriptingLanguage {
    None,
    CSharp,
}
IGenerator <|-- ProjectGeneration
ProjectGeneration +-- ScriptingLanguage
@enduml
