@startuml
class TestMainModel {
    + clearErrorCount : int
    + requestSyncCount : int
    + requestCancelJobCount : int
    + historyModel : IHistoryModel
    + changesModel : IChangesModel
    + backNavigation : (string id, string text, Action backAction)?
    +  <<event>> ConflictStatusChange : Action<bool> 
    + TriggerConflictStatusChange(conflict:bool) : void
    +  <<event>> OperationStatusChange : Action<bool> 
    + TriggerOperationStatusChange(inProgress:bool) : void
    +  <<event>> OperationProgressChange : Action<IProgressInfo> 
    + TriggerOperationProgressChange(progressInfo:IProgressInfo) : void
    +  <<event>> ErrorOccurred : Action<IErrorInfo> 
    + TriggerErrorOccurred(errorInfo:IErrorInfo) : void
    +  <<event>> ErrorCleared : Action 
    + TriggerErrorCleared() : void
    +  <<event>> RemoteRevisionsAvailabilityChange : Action<bool> 
    + TriggerRemoteRevisionsAvailabilityChange(available:bool) : void
    +  <<event>> BackButtonStateUpdated : Action<string> 
    + TriggerBackButtonStateUpdated(backText:string) : void
    +  <<event>> StateChanged : Action 
    + TriggerStateChanged() : void
    + RemoteRevisionsAvailable : bool <<get>> <<set>>
    + Conflicted : bool <<get>> <<set>>
    + ProgressInfo : IProgressInfo <<get>> <<set>>
    + ErrorInfo : IErrorInfo <<get>> <<set>>
    + CurrentTabIndex : int <<get>> <<set>>
    + ConstructHistoryModel() : IHistoryModel
    + ConstructChangesModel() : IChangesModel
    + ClearError() : void
    + RequestSync() : void
    + RequestCancelJob() : void
    + GetBackNavigation() : (string id, string text, Action backAction)?
    + RegisterBackNavigation(id:string, text:string, backAction:Action) : void
    + UnregisterBackNavigation(id:string) : bool
    + OnStart() : void
    + OnStop() : void
    + RestoreState(cache:IWindowCache) : void
    + SaveState(cache:IWindowCache) : void
}
IMainModel <|-- TestMainModel
@enduml
