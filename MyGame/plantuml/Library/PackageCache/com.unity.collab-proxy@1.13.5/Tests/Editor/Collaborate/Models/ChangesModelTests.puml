@startuml
class ChangesModelTests {
    + ChangesModel_NullSourceControlEntries_EmptyResultLists() : void
    + ChangesModel_EmptySourceControlEntries_EmptyResultLists() : void
    + ChangesModel_SingleSourceControlEntries_SingleUntoggledResult() : void
    + ChangesModel_MultipleSourceControlEntries_ToggleSingle() : void
    + ChangesModel_MultipleSourceControlEntries_ToggleAll() : void
    + ChangesModel_MultipleSourceControlEntries_ToggleAllIndividually() : void
    + ChangesModel_MultipleSourceControlEntries_UntoggleSingleFromAll() : void
    + ChangesModel_MultipleSourceControlEntries_SomeConflicted() : void
    + ChangesModel_InitializeFromDictionary_TransfersToggledFlag() : void
    + ChangesModel_SearchFilters_CaseInsensitive() : void
    + TestRequestInitialData() : void
    + TestReceiveUpdatedChangeListEvent() : void
    + TestRequestDiff() : void
    + TestRequestDiscard() : void
    + TestRequestPublish() : void
    {static} AddEntry(list:ICollection<IChangeEntry>, pathTag:string, status:ChangeEntryStatus, staged:bool, unmerged:bool) : void
    {static} BuildChangesList(count:int) : List<IChangeEntry>
}
class TestableChangesModel {
    + Provider : TestSourceControlProvider <<get>>
    + TestableChangesModel()
    + SetToggled(toggled:Dictionary<string, bool>) : void
    <<internal>> <<override>> UpdateChangeList(list:IReadOnlyList<IChangeEntry>) : void
    + <<override>> UpdateEntryToggle(path:string, value:bool) : bool
    ValidateData() : void
}
ChangesModelTests +-- TestableChangesModel
ChangesModel <|-- TestableChangesModel
@enduml
