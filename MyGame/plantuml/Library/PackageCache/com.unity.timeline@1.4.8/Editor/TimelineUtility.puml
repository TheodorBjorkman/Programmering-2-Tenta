@startuml
class TimelineUtility <<static>> {
    + {static} ReorderTracks(allTracks:List<ScriptableObject>, tracks:List<TrackAsset>, insertAfterAsset:ScriptableObject, up:bool) : void
    + {static} GetSceneReferenceTrack(asset:TrackAsset) : TrackAsset
    + {static} TrackHasAnimationCurves(track:TrackAsset) : bool
    + {static} GetSceneGameObject(director:PlayableDirector, asset:TrackAsset) : GameObject
    + {static} SetSceneGameObject(director:PlayableDirector, asset:TrackAsset, go:GameObject) : void
    + {static} GetDirectorsInSceneUsingAsset(asset:PlayableAsset) : PlayableDirector[]
    + {static} GetDirectorComponentForGameObject(gameObject:GameObject) : PlayableDirector
    + {static} GetTimelineAssetForDirectorComponent(director:PlayableDirector) : TimelineAsset
    + {static} IsPrefabOrAsset(obj:Object) : bool
    <<internal>> {static} PropertyToString(property:SerializedProperty) : string
    <<internal>> {static} IsRecordableAnimationClip(clip:TimelineClip) : bool
    + {static} GetSubTimelines(clip:TimelineClip, director:IExposedPropertyTable) : IList<PlayableDirector>
    + {static} IsAllSubTrackMuted(asset:TrackAsset) : bool
    + {static} IsParentMuted(asset:TrackAsset) : bool
    + {static} GetAllDirectorsInHierarchy(mainDirector:PlayableDirector) : IEnumerable<PlayableDirector>
    {static} GetAllDirectorsInHierarchy(director:PlayableDirector, directors:ISet<PlayableDirector>) : void
    + {static} GetBindingsFromDirectors(directors:IEnumerable<PlayableDirector>) : IEnumerable<T>
    + {static} IsLockedFromGroup(asset:TrackAsset) : bool
    <<internal>> {static} IsCurrentSequenceValid() : bool
    + {static} CreateAndSaveTimelineAsset(path:string) : TimelineAsset
}
@enduml
